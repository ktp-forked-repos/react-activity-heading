// Generated by CoffeeScript 1.9.3
(function() {
  var ActivityHeading, Component, PropTypes, React, VelocityTransitionGroup, debounce, merge, ref, throttle,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require("velocity-animate");

  require("velocity-animate/velocity.ui");

  React = require("react");

  Component = React.Component, PropTypes = React.PropTypes;

  VelocityTransitionGroup = require("velocity-react").VelocityTransitionGroup;

  ref = require("lodash/function"), debounce = ref.debounce, throttle = ref.throttle;

  merge = require("lodash/object").merge;

  ActivityHeading = (function(superClass) {
    extend(ActivityHeading, superClass);

    function ActivityHeading(props) {
      this.showStatus = bind(this.showStatus, this);
      this.hideStatus = bind(this.hideStatus, this);
      ActivityHeading.__super__.constructor.call(this, props);
      this.state = {
        status: false
      };
    }

    ActivityHeading.prototype.componentWillMount = function() {
      this.showStatus = throttle(this.showStatus, this.props.refreshRate);
      return this.hideStatus = debounce(this.hideStatus, this.props.refreshRate + 100);
    };

    ActivityHeading.prototype.componentWillUnmount = function() {
      this.hideStatus.cancel();
      return this.showStatus.cancel();
    };

    ActivityHeading.prototype.componentWillReceiveProps = function(nextProps) {
      var exitStatus, nextStatus, prevStatus;
      prevStatus = this.props.showActivityStatus ? this.props.activityStatus : void 0;
      nextStatus = nextProps.showActivityStatus ? nextProps.activityStatus : void 0;
      exitStatus = nextProps.showCompleteStatus ? nextProps.completeStatus : void 0;
      if (prevStatus && !nextStatus) {
        if (exitStatus) {
          this.showStatus(exitStatus);
        }
        this.hideStatus();
      }
      if (nextStatus) {
        return this.showStatus(nextStatus);
      }
    };

    ActivityHeading.prototype.hideStatus = function() {
      return this.setState({
        status: false
      });
    };

    ActivityHeading.prototype.showStatus = function(status) {
      return this.setState({
        status: status
      });
    };

    ActivityHeading.prototype.render = function() {
      var enterAnimation, leaveAnimation, styles;
      enterAnimation = {
        animation: "transition.slideDownIn",
        duration: this.props.speed
      };
      leaveAnimation = {
        animation: "transition.slideDownOut",
        duration: this.props.speed * 0.75
      };
      styles = {
        wrapper: {
          height: this.props.height,
          lineHeight: this.props.height,
          display: "block",
          position: "relative",
          overflow: "hidden",
          textAlign: "center"
        },
        heading: {
          position: "absolute",
          left: 0,
          right: 0,
          margin: 0
        }
      };
      styles = merge(styles, this.props.styles);
      return React.createElement(VelocityTransitionGroup, {
        "className": this.props.className,
        "enter": enterAnimation,
        "leave": leaveAnimation,
        "style": styles.wrapper
      }, (this.state.status ? React.createElement("span", {
        "style": styles.heading,
        "key": "status"
      }, this.state.status) : React.createElement("span", {
        "style": styles.heading,
        "key": "title"
      }, this.props.title)));
    };

    return ActivityHeading;

  })(Component);

  ActivityHeading.displayName = "ActivityHeading";

  ActivityHeading.propTypes = {
    title: PropTypes.string.isRequired,
    showActivityStatus: PropTypes.bool,
    showCompleteStatus: PropTypes.bool,
    activityStatus: PropTypes.string,
    completeStatus: PropTypes.string,
    refreshRate: PropTypes.number.isRequired,
    speed: PropTypes.number.isRequired,
    height: PropTypes.string.isRequired,
    styles: PropTypes.shape({
      wrapper: PropTypes.object,
      heading: PropTypes.object
    })
  };

  ActivityHeading.defaultProps = {
    activityStatus: "Loading...",
    completeStatus: "Done",
    showCompleteStatus: true,
    refreshRate: 1000,
    speed: 300,
    height: "1.5em"
  };

  module.exports = ActivityHeading;

}).call(this);
